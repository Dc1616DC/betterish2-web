'use client';

import { useState, useEffect } from 'react';
import { CalendarIcon, GiftIcon, CakeIcon, HeartIcon } from '@heroicons/react/24/outline';
import { collection, addDoc, Timestamp } from 'firebase/firestore';

const EVENT_TYPES = {
  birthday: { icon: CakeIcon, color: 'bg-pink-100 text-pink-800', emoji: 'ðŸŽ‚' },
  anniversary: { icon: HeartIcon, color: 'bg-red-100 text-red-800', emoji: 'ðŸ’•' },
  holiday: { icon: GiftIcon, color: 'bg-green-100 text-green-800', emoji: 'ðŸŽ„' },
  appointment: { icon: CalendarIcon, color: 'bg-blue-100 text-blue-800', emoji: 'ðŸ“…' },
  school_event: { icon: CalendarIcon, color: 'bg-yellow-100 text-yellow-800', emoji: 'ðŸŽ“' }
};

const UPCOMING_EVENTS = [
  // Birthdays
  { type: 'birthday', name: 'Mom', date: '2025-09-15', daysUntil: 21 },
  { type: 'birthday', name: 'Little one', date: '2025-10-03', daysUntil: 39 },
  
  // Holidays
  { type: 'holiday', name: 'Halloween', date: '2025-10-31', daysUntil: 67 },
  { type: 'holiday', name: 'Thanksgiving', date: '2025-11-28', daysUntil: 95 },
  { type: 'holiday', name: 'Christmas', date: '2025-12-25', daysUntil: 122 },
  
  // Appointments
  { type: 'appointment', name: 'Pediatrician checkup', date: '2025-09-10', daysUntil: 16 },
  { type: 'appointment', name: 'Dentist cleaning', date: '2025-09-25', daysUntil: 31 },
];

function getEventTasks(event) {
  const tasks = [];
  
  switch (event.type) {
    case 'birthday':
      tasks.push(
        { title: `Buy ${event.name}'s birthday gift`, detail: 'Think about what they'd love', category: 'events', priority: 'medium' },
        { title: `Plan ${event.name}'s birthday celebration`, detail: 'Cake, decorations, party?', category: 'events', priority: 'high' },
        { title: 'Send birthday invitations', detail: 'If having a party', category: 'events', priority: 'medium' }
      );
      break;
      
    case 'holiday':
      if (event.name === 'Christmas') {
        tasks.push(
          { title: 'Start Christmas shopping', detail: 'Make lists for everyone', category: 'events', priority: 'medium' },
          { title: 'Plan Christmas decorating', detail: 'Tree, lights, ornaments', category: 'events', priority: 'low' },
          { title: 'Book holiday travel', detail: 'If visiting family', category: 'events', priority: 'high' }
        );
      } else if (event.name === 'Halloween') {
        tasks.push(
          { title: 'Get Halloween costumes', detail: 'For the whole family', category: 'events', priority: 'medium' },
          { title: 'Buy Halloween candy', detail: 'For trick-or-treaters', category: 'events', priority: 'low' },
          { title: 'Plan trick-or-treat route', detail: 'Safe neighborhood streets', category: 'events', priority: 'low' }
        );
      } else if (event.name === 'Thanksgiving') {
        tasks.push(
          { title: 'Plan Thanksgiving menu', detail: 'Turkey, sides, dessert', category: 'events', priority: 'high' },
          { title: 'Grocery shop for Thanksgiving', detail: 'Get turkey early', category: 'events', priority: 'high' },
          { title: 'Confirm Thanksgiving guests', detail: 'How many coming?', category: 'events', priority: 'medium' }
        );
      }
      break;
      
    case 'appointment':
      tasks.push(
        { title: `Confirm ${event.name}`, detail: 'Call to verify time', category: 'health', priority: 'medium' },
        { title: 'Prepare for appointment', detail: 'Insurance cards, questions list', category: 'health', priority: 'low' },
        { title: 'Arrange childcare if needed', detail: 'For appointment time', category: 'health', priority: 'medium' }
      );
      break;
  }
  
  return tasks;
}

export default function EventReminder({ user, db, onTaskAdded, compact = false }) {
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState(null);

  useEffect(() => {
    // Calculate days until events based on current date
    const today = new Date();
    const eventsWithDays = UPCOMING_EVENTS.map(event => {
      const eventDate = new Date(event.date);
      const timeDiff = eventDate.getTime() - today.getTime();
      const daysUntil = Math.ceil(timeDiff / (1000 * 3600 * 24));
      return { ...event, daysUntil };
    }).filter(event => event.daysUntil > 0).sort((a, b) => a.daysUntil - b.daysUntil);
    
    setUpcomingEvents(eventsWithDays.slice(0, compact ? 3 : 10));
  }, [compact]);

  const handleAddEventTask = async (task) => {
    if (!user || !db) return;
    
    try {
      const newTask = {
        ...task,
        userId: user.uid,
        createdAt: Timestamp.now(),
        source: 'event_reminder',
        dismissed: false,
        deleted: false,
      };

      await addDoc(collection(db, 'tasks'), newTask);
      
      if (onTaskAdded) onTaskAdded();
    } catch (error) {
      console.error('Error adding event task:', error);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
    });
  };

  const getDaysUntilText = (days) => {
    if (days === 0) return 'Today!';
    if (days === 1) return 'Tomorrow';
    if (days < 7) return `${days} days`;
    if (days < 30) return `${Math.floor(days / 7)} weeks`;
    return `${Math.floor(days / 30)} months`;
  };

  if (upcomingEvents.length === 0) return null;

  return (
    <div className="bg-purple-50 border border-purple-200 rounded-xl p-4 mb-4">
      <div className="flex items-center gap-2 mb-3">
        <CalendarIcon className="w-5 h-5 text-purple-600" />
        <h3 className="font-semibold text-purple-800">Upcoming Events</h3>
      </div>

      <div className="space-y-2">
        {upcomingEvents.map((event, index) => {
          const eventConfig = EVENT_TYPES[event.type];
          const IconComponent = eventConfig.icon;
          
          return (
            <div
              key={index}
              className="flex items-center justify-between p-3 bg-white bg-opacity-50 rounded-lg hover:bg-white hover:bg-opacity-70 transition-colors"
            >
              <div className="flex items-center gap-3">
                <span className="text-xl">{eventConfig.emoji}</span>
                <div>
                  <div className="font-medium text-gray-900">{event.name}</div>
                  <div className="text-sm text-gray-600">
                    {formatDate(event.date)} â€¢ {getDaysUntilText(event.daysUntil)}
                  </div>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <span className={`text-xs px-2 py-1 rounded-full ${eventConfig.color}`}>
                  {event.type.replace('_', ' ')}
                </span>
                <button
                  onClick={() => setSelectedEvent(event)}
                  className="text-purple-600 hover:text-purple-700 text-sm font-medium"
                  title="Get task suggestions for this event"
                >
                  Plan â†’
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {/* Event Task Suggestions Modal */}
      {selectedEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-lg p-6 w-full max-w-md">
            <h3 className="font-semibold text-gray-800 mb-2">
              Planning for {selectedEvent.name}
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              {formatDate(selectedEvent.date)} â€¢ {getDaysUntilText(selectedEvent.daysUntil)}
            </p>

            <div className="space-y-3 mb-4">
              <p className="text-sm font-medium text-gray-700">Suggested tasks:</p>
              {getEventTasks(selectedEvent).map((task, index) => (
                <div
                  key={index}
                  className="flex items-start justify-between p-3 bg-gray-50 rounded-lg"
                >
                  <div className="flex-grow">
                    <div className="font-medium text-sm text-gray-900">{task.title}</div>
                    <div className="text-xs text-gray-600">{task.detail}</div>
                  </div>
                  <button
                    onClick={() => handleAddEventTask(task)}
                    className="ml-3 text-blue-600 hover:text-blue-700 text-sm font-medium"
                  >
                    Add
                  </button>
                </div>
              ))}
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setSelectedEvent(null)}
                className="flex-1 py-2 px-4 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
              <button
                onClick={() => {
                  getEventTasks(selectedEvent).forEach(task => handleAddEventTask(task));
                  setSelectedEvent(null);
                }}
                className="flex-1 py-2 px-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                Add All Tasks
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}